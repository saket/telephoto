package me.saket.telephoto.zoomable

import androidx.compose.runtime.Immutable
import androidx.compose.runtime.Stable
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.TransformOrigin
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.ScaleFactor
import me.saket.telephoto.zoomable.internal.Zero

/**
 * Graphics transformations generated by [Modifier.zoomable] when pan & zoom gestures are received.
 *
 * By default, these are automatically applied by `Modifier.zoomable()` to its content, but this
 * can be disabled using [ZoomableState.autoApplyTransformations] if you prefer applying them in
 * a bespoke manner.
 */
@Immutable
data class ZoomableContentTransformation internal constructor(
  /**
   * Whether this object contains non-placeholder values. This will be false when
   * [Modifier.zoomable] is initializing and sufficient information to position
   * and show its content is not yet available.
   *
   * Until specified transformations are received, zoomable content should stay hidden.
   * This is done automatically if [ZoomableState.autoApplyTransformations] is `true`.
   */
  val isSpecified: Boolean,

  /**
   * The size of the zoomable content that is currently known to [Modifier.zoomable].
   * This is calculated using [ZoomableContentLocation.size] and may be one frame
   * behind the UI.
   */
  val contentSize: Size = Size.Unspecified,

  /**
   * The scale of the zoomable content along the x and y axes, generated in response
   * to zoom gestures. This value represents the scaling factor that should be applied
   * to the content to achieve the desired zoom level.
   *
   * Values on both the axes can be less than 0 if the image size is larger than
   * its layout size.
   */
  val scale: ScaleFactor,

  /**
   * The rotation of the zoomable content around the z-axis. This parameter is currently
   * unused and defaults to `0`, but may be used in the future if [Modifier.zoomable]
   * adds support for rotation gestures.
   */
  val rotationZ: Float = 0f,

  /**
   * The translation of the zoomable content along the x and y axes, generated in
   * response to pan gestures. This value represents the amount by which the content
   * should be translated to achieve the desired pan position.
   */
  val offset: Offset,

  /**
   * Offset percentage along the x and y axis for which [scale] and [offset] must be applied.
   */
  val transformOrigin: TransformOrigin = TransformOrigin.Zero,
) {
  /** Inverse of [isSpecified]. */
  val isUnspecified: Boolean get() = !isSpecified
}

@Stable
internal fun Modifier.applyTransformation(transformation: ZoomableContentTransformation): Modifier {
  return graphicsLayer {
    scaleX = transformation.scale.scaleX
    scaleY = transformation.scale.scaleY
    rotationZ = transformation.rotationZ
    translationX = transformation.offset.x
    translationY = transformation.offset.y
    transformOrigin = transformation.transformOrigin
  }
}
